}
# uniroot() 함수는 대략적인 근의 위치, 그 지점의 함수 값, 소요되는 반복 횟수 및 추정된 근의 정확도를 포함하는 리스트를 반환한다.
uniroot(f,lower=1,upper=100)
b = 2.64 # 위에서 나온 결과 이용
a = (4*b)-3
# curve 그리기
plot1=curve(dbeta(x,shape1 = a , shape2 = b),
from = 0 ,
to=1,
ylab = 'pdf',
xlab = 'theta',
main = '믿음')
#----- 히스토그램 그리기 -----#
s0 <- rep(0.05,0)
s1 <- rep(0.15,1)
s2 <- rep(0.25,1)
s3 <- rep(0.35,2)
s4 <- rep(0.45,3)
s5 <- rep(0.55,8)
s6 <- rep(0.65,20)
s7 <- rep(0.75,25)
s8 <- rep(0.85,35)
s9 <- rep(0.95,10)
data = c(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9)
hist(data,
breaks=seq(0,1,by=0.1),
probability = T)
lines(plot1)
BernGrid(Theta = seq(0,1,0.1),
pTheta = rep(1/11,11),
Data = c(rep(0,9), rep(1,3)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid = function( Theta , pTheta , Data , plotType=c("Points","Bars")[2] ,
showCentTend=c("Mean","Mode","None")[3] ,
showHDI=c(TRUE,FALSE)[2] , HDImass=0.95 ,
showpD=c(TRUE,FALSE)[2] ,
nToPlot=min(2001,length(Theta)) ) {
# Theta is vector of values between 0 and 1.
# pTheta is prior probability mass at each value of Theta
# Data is vector of 0's and 1's.
# Check for input errors:
if ( any( Theta > 1 | Theta < 0 ) ) {
stop("Theta values must be between 0 and 1")
};
if ( any( pTheta < 0 ) ) {
stop("pTheta values must be non-negative")
}
if ( !isTRUE(all.equal( sum(pTheta) , 1.0 )) )  {
stop("pTheta values must sum to 1.0")
}
if ( !all( Data == 1 | Data == 0 ) ) {
stop("Data values must be 0 or 1")
}
# Create summary values of Data
z = sum( Data ) # number of 1's in Data
N = length( Data )
# Compute the Bernoulli likelihood at each value of Theta:
pDataGivenTheta = Theta^z * (1-Theta)^(N-z)
# Compute the evidence and the posterior via Bayes' rule:
pData = sum( pDataGivenTheta * pTheta )
pThetaGivenData = pDataGivenTheta * pTheta / pData
# Plot the results.
layout( matrix( c( 1,2,3 ) ,nrow=3 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels
par( mar=c(3,3,1,0) , mgp=c(2,0.7,0) , mai=c(0.5,0.5,0.3,0.1) ) # margins
cexAxis = 1.33
cexLab = 1.75
# convert plotType to notation used by plot:
if ( plotType=="Points" ) { plotType="p" }
if ( plotType=="Bars" ) { plotType="h" }
dotsize = 5 # how big to make the plotted dots
barsize = 5 # how wide to make the bar lines
# If the comb has a zillion teeth, it's too many to plot, so plot only a
# thinned out subset of the teeth.
nteeth = length(Theta)
if ( nteeth > nToPlot ) {
thinIdx = round( seq( 1, nteeth , length=nToPlot ) )
} else {
thinIdx = 1:nteeth
}
# Plot the prior.
yLim = c(0,1.1*max(c(pTheta,pThetaGivenData)))
plot( Theta[thinIdx] , pTheta[thinIdx] , type=plotType ,
pch="." , cex=dotsize , lwd=barsize ,
xlim=c(0,1) , ylim=yLim , cex.axis=cexAxis ,
xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=cexLab ,
main="Prior" , cex.main=1.5 , col="skyblue" )
if ( showCentTend != "None" ) {
if ( showCentTend == "Mean" ) {
meanTheta = sum( Theta * pTheta )
if ( meanTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , yLim[2] ,
bquote( "mean=" * .(signif(meanTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
if ( showCentTend == "Mode" ) {
modeTheta = Theta[ which.max( pTheta ) ]
if ( modeTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , yLim[2] ,
bquote( "mode=" * .(signif(modeTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
}
# Mark the highest density interval. HDI points are not thinned in the plot.
if ( showHDI ) {
HDIinfo = HDIofGrid( pTheta , credMass=HDImass )
points( Theta[ HDIinfo$indices ] ,
rep( HDIinfo$height , length( HDIinfo$indices ) ) ,
pch="-" , cex=1.0 )
text( mean( Theta[ HDIinfo$indices ] ) , HDIinfo$height ,
bquote( .(100*signif(HDIinfo$mass,3)) * "% HDI" ) ,
adj=c(0.5,-1.5) , cex=1.5 )
# Mark the left and right ends of the waterline.
# Find indices at ends of sub-intervals:
inLim = HDIinfo$indices[1] # first point
for ( idx in 2:(length(HDIinfo$indices)-1) ) {
if ( ( HDIinfo$indices[idx] != HDIinfo$indices[idx-1]+1 ) | # jumps on left, OR
( HDIinfo$indices[idx] != HDIinfo$indices[idx+1]-1 ) ) { # jumps on right
inLim = c(inLim,HDIinfo$indices[idx]) # include idx
}
}
inLim = c(inLim,HDIinfo$indices[length(HDIinfo$indices)]) # last point
# Mark vertical lines at ends of sub-intervals:
for ( idx in inLim ) {
lines( c(Theta[idx],Theta[idx]) , c(-0.5,HDIinfo$height) , type="l" , lty=2 ,
lwd=1.5 )
text( Theta[idx] , HDIinfo$height , bquote(.(round(Theta[idx],3))) ,
adj=c(0.5,-0.1) , cex=1.2 )
}
}
# Plot the likelihood: p(Data|Theta)
plot( Theta[thinIdx] , pDataGivenTheta[thinIdx] , type=plotType ,
pch="." , cex=dotsize , lwd=barsize ,
xlim=c(0,1) , ylim=c(0,1.1*max(pDataGivenTheta)) , cex.axis=cexAxis ,
xlab=bquote(theta) , ylab=bquote( "p(D|" * theta * ")" ) , cex.lab=cexLab ,
main="Likelihood" , cex.main=1.5 , col="skyblue" )
if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx ,1.0*max(pDataGivenTheta) ,cex=2.0
,bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )
if ( showCentTend != "None" ) {
if ( showCentTend == "Mean" ) {
meanTheta = sum( Theta * pDataGivenTheta )
if ( meanTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , 0.7*max(pDataGivenTheta) ,
bquote( "mean=" * .(signif(meanTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
if ( showCentTend == "Mode" ) {
modeTheta = Theta[ which.max( pDataGivenTheta ) ]
if ( modeTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , 0.7*max(pDataGivenTheta) ,
bquote( "mode=" * .(signif(modeTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
}
# Plot the posterior.
yLim = c(0,1.1*max(c(pTheta,pThetaGivenData)))
plot( Theta[thinIdx] , pThetaGivenData[thinIdx] , type=plotType ,
pch="." , cex=dotsize , lwd=barsize ,
xlim=c(0,1) , ylim=yLim , cex.axis=cexAxis ,
xlab=bquote(theta) , ylab=bquote( "p(" * theta * "|D)" ) , cex.lab=cexLab ,
main="Posterior" , cex.main=1.5 , col="skyblue" )
if ( showCentTend != "None" ) {
if ( showCentTend == "Mean" ) {
meanTheta = sum( Theta * pThetaGivenData )
if ( meanTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , yLim[2] ,
bquote( "mean=" * .(signif(meanTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
if ( showCentTend == "Mode" ) {
modeTheta = Theta[ which.max( pThetaGivenData ) ]
if ( modeTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , yLim[2] ,
bquote( "mode=" * .(signif(modeTheta,3)) ) ,
cex=2.0 , adj=textadj )
}
}
# Plot marginal likelihood pData:
if ( showpD ) {
meanTheta = sum( Theta * pThetaGivenData )
if ( meanTheta > .5 ) {
textx = 0 ; textadj = c(0,1)
} else {
textx = 1 ; textadj = c(1,1)
}
text( textx , 0.75*max(pThetaGivenData) , cex=2.0 ,
bquote( "p(D)=" * .(signif(pData,3)) ) ,adj=textadj )
}
# Mark the highest density interval. HDI points are not thinned in the plot.
if ( showHDI ) {
HDIinfo = HDIofGrid( pThetaGivenData , credMass=HDImass )
points( Theta[ HDIinfo$indices ] ,
rep( HDIinfo$height , length( HDIinfo$indices ) ) ,
pch="-" , cex=1.0 )
text( mean( Theta[ HDIinfo$indices ] ) , HDIinfo$height ,
bquote( .(100*signif(HDIinfo$mass,3)) * "% HDI" ) ,
adj=c(0.5,-1.5) , cex=1.5 )
# Mark the left and right ends of the waterline.
# Find indices at ends of sub-intervals:
inLim = HDIinfo$indices[1] # first point
for ( idx in 2:(length(HDIinfo$indices)-1) ) {
if ( ( HDIinfo$indices[idx] != HDIinfo$indices[idx-1]+1 ) | # jumps on left, OR
( HDIinfo$indices[idx] != HDIinfo$indices[idx+1]-1 ) ) { # jumps on right
inLim = c(inLim,HDIinfo$indices[idx]) # include idx
}
}
inLim = c(inLim,HDIinfo$indices[length(HDIinfo$indices)]) # last point
# Mark vertical lines at ends of sub-intervals:
for ( idx in inLim ) {
lines( c(Theta[idx],Theta[idx]) , c(-0.5,HDIinfo$height) , type="l" , lty=2 ,
lwd=1.5 )
text( Theta[idx] , HDIinfo$height , bquote(.(round(Theta[idx],3))) ,
adj=c(0.5,-0.1) , cex=1.2 )
}
}
return( pThetaGivenData )
} # end of function
BernGrid(Theta = seq(0,1,0.1),
pTheta = rep(1/11,11),
Data = c(rep(0,9), rep(1,3)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(0,9), rep(1,3)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=TRUE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=TRUE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=TRUE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = rep(1/11,times = 11),
Data = c(rep(0,5), rep(1,7)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = rep(1/11,times = 11),
Data = c(rep(0,5), rep(1,7)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = rep(1/11,times = 11),
Data = c(rep(0,100), rep(1,100)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = rep(1/11,times = 11),
Data = c(rep(1,100)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = c(0.4,0.5,0.6),
pTheta = rep(0.25,0.5,0.25),
Data = c(1),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = c(0.4,0.5,0.6),
pTheta = rep(0.25,0.5,0.25),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = c(0.4,0.5,0.6),
pTheta = rep(0.25,0.5,0.25),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = c(0.4,0.5,0.6),
pTheta = c(0.25,0.5,0.25),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = c(0,0,0,0.25,0.5,0.25,0,0,0,0),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
seq(0,1,by = 0.1)
len(seq(0,1,by = 0.1))
length(seq(0,1,by = 0.1))
length(c(0,0,0,0.25,0.5,0.25,0,0,0,0))
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = c(0,0,0,0,0.25,0.5,0.25,0,0,0,0),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = c(0,0,0,0,0.25,0.5,0.25,0,0,0,0),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = c(0,0,0,0,0.25,0.5,0.25,0,0,0,0),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1), # 모수가 되는 값들
pTheta = rep(1/11,times= 11),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
BernGrid(Theta = seq(0,1,by = 0.1),
pTheta = c(0,0,0,0,0.25,0.5,0.25,0,0,0,0),
Data = c(rep(1,1)),
plotType="Bars",
showCentTend=FALSE,
showHDI=FALSE,
showpD=FALSE)
# getwd() 현재 설정된 작업한 파일 위치를 보여준다.
getwd()
setwd('C:/Users/goran/Desktop/Git_Hub/R/R tools/[Method] Anova')
#Chapter 3
ch3 = read.csv('ch3.csv', header=TRUE)
head(ch3)
boxplot(observations ~ Methods,
data = ch3,
col = "lightgray",
medlwd=1,
main="Boxplots of Method1 - Method4",
names=c("Method1","Method2","Method3","Method4"))
# observation 이라는 관찰값을 Method 라는 요인의 수준별로 mean 을 적용
means <- tapply(ch3$observations,ch3$Methods,mean) ; means
points(means,pch=18,col='red')
mtext("means are indicated by solid circles")
# ANOVA table
# 현재 1,2,3 의 범주형으로 구성되어있는 Method 를 factor 형으로 바꾸어주어야 한다.
ch3$Methods <- as.factor(ch3$Methods)
summary(ch3.aov)
# 앞의 값은 observation 으로, 실제 값들의 vector 이고, 뒤의값은, 구분되는 factor 들이다.
ch3.aov <- aov(observations~Methods, data = ch3)
summary(ch3.aov)
# residual plot
residuals <- resid(ch3.aov)
Fitted = fitted(ch3.aov)
plot(Fitted, residuals, xlab="Fitted Value", ylab="Residual",
pch=20, main="Residuals vs the Fitted Values")
abline(0,0, lty = 2)
method_1 <- c(1000,1500,1200,1800,1600,1100,1000,1250)
method_2 <- c(1500,1800,2000,1200,2000,1700,1800,1900)
method_3 <- c(900 ,1000,1200,1500,1200,1550,1000,1100)
df <- data.frame(method_1,method_2,method_3)
df
data <- c(method_1,method_2,method_3)
method <- rep(1:3,each=8)
df <- data.frame(data,method)
df
str(Cars93)
library(MASS)
str(Cars93)
attach(Cars93)
# apply 조작
mat <- matrix(c(1:9),byrow=TRUE,nrow=3)
mat
apply(mat,1,max) # col 관점(1)에서 최대값을 뽑아라 # 즉 row의 max
apply(mat,2,max) # row 관점(2)에서 최대값을 봅아라 # 즉 col의 max
apply(mat,1,mean)
apply(mat,2,sum) # col sum
str(Cars93)
str(df)
df$method = as.factor(df$method)
str(df)
attach(df)
aov <- aov(data~method, data = df)
summary(aov)
method_1 <- c(10,13,14,15)
method_2 <- c(9,8,10,8)
method_3 <- c(5,12,7,10)
data <- c(method_1,method_2,method_3)
method <- rep(1:3,each=8)
df <- data.frame(data,method)
attach(df)
method <- rep(1:3,each=c(4,3,3))
method_1 <- c(10,13,14,15)
method_2 <- c(9,8,11)
method_3 <- c(5,12,7)
data <- c(method_1,method_2,method_3)
method <- rep(1:3,each=c(4,3,3))
df <- data.frame(data,method)
rep?
method <- rep(1:3,each=c(4,3,3))
?rep
ep(1:4, c(2,1,2,1))
rep(1:4, c(2,1,2,1))
method <- rep(1:3,times=c(4,3,3))
df <- data.frame(data,method)
attach(df)
method_1 <- c(10,13,14,15)
method_2 <- c(9,8,11)
method_3 <- c(5,12,7)
data <- c(method_1,method_2,method_3)
?rep
method <- rep(1:3,times=c(4,3,3))
df <- data.frame(data,method)
attach(df)
method
data
df <- data.frame(data,method)
attach(df)
df$method = as.factor(df$method)
str(df) # factor 의 형태로 변환된것을 볼 수 있다.
aov <- aov(data~method, data = df)
summary(aov)
qf(0.95,2,7)
