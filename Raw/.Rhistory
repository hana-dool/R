# read.csv('.../데이터.csv') : 경로에서 csv 파일을 읽어옵니다.
data<-read.csv('C:/Users/Han/Desktop/data_finance.csv')
# colsole 의 메시지 전부삭제
cat("\014")
# 우층 상단의 envirenment 창의 모든 dataseats를 삭제
rm(list=ls())
# 우측 하단의 plots 창에 있는 plot 들을 전부 삭제
dev.off()
# 내장 data import 하기
data(trees)
# 우측 하단의 plots 창에 있는 plot 들을 전부 삭제
dev.off()
# 내장 data import 하기
data(trees)
# 데이터 프레임 선택
trees[trees$Height>3,]
# 지수형태 출력 바꾸기
options("scipen" = -100) # 작은 값을 지정하면 지수가 붙어서 나온다.
999 * 1000000
options("scipen" = 100) # 큰 값을 지정하면 값이 그대로 나온다.
999 * 1000000
options("scipen" = 0) # default
999 * 1000000
# 새로운 열 추가
data('mtcars')
mtcars
mtcars$carname = 2
mtcars # 위와같이 지정하면 그냥 추가된다.
# [attach] 데이터 프레임의 값 붙여주기(계속 사용하기위해)
attach(trees)
mean(Height)
# [detach] 데이터 프레임을 떼놓을 때에 사용한다
detach(trees)
mean(Height)
# [with] (attach 의 간소화 버젼)
library(MASS)
data(Cars93)
mean(mtcars$mpg)
mean(Height)
mean(trees$Height)
# [with] (attach 의 간소화 버젼)
library(MASS)
data(Cars93)
mean(mtcars$mpg)
# '데이터 프레임 이름$변수명' 형식으로 '$'를 이용해 객체 지정해주어야 R이 이해를 함
mean(mtcars$mpg)
tf_0_1 <- (max(mtcars$mpg) - mtcars$mpg) / (max(mtcars$mpg) - min(mtcars$mpg))
tf_0_1
# 위의 '$'는 R 명령어를 입력할 때마다 매번 '데이터 프레임 이름$변수명' 처럼 데이터 프레임 이름을 입력해주어야 하므로,
# 입력해야할 R 명령문이 많아지만 꽤 번거로운 방법
# 이런 번거로움을 해결해주는 방법이 바로 WITH 이다.
tf_0_1_2 <- with(mtcars, (max(mpg) - mpg) / (max(mpg) - min(mpg)) )
tf_0_1_2
# [print]
# 이렇게 하면 모든 자릿수를 표기할 수 있다
print(13^12, digits=15)
# 변수 목록 보기
ls()
#rbind / cbind
array1 <- c(1,2,3)
array2 <- c(4,5,6)
#rbind / cbind
array1 <- c(1,2,3)
array2 <- c(4,5,6)
array3 <- c(7,8,9)
rbind(array1,array2,array3) # row 기준으로 구성
cbind(array1,array2,array3) # col 기준으로 구성
#1dim vector 데이터로 매트릭스스 구성하기
x = c(1:9)
mat1<-matrix(x,nrow=3) # 그냥 matrix 로 하게되면 col 기준으로 채워진다.
mat1
mat2<-matrix(x,nrow=3,byrow=TRUE) # byrow=TRUE 로 하게되면 row 으로 채운다.
mat2
#col 이름 바꾸기
colnames(mat1) <- c('A','B','C')
mat1
#row 이름 바꾸기기
rownames(mat1) <- c('가','나','다')
mat1
#col 이름 바꾸기
class(mat1)
# apply 조작
mat1
apply(mat1,1,max) # col 관점(1)에서 최대값을 뽑아라 # 즉 row의 max
apply(mat1,2,max) # row 관점(2)에서 최대값을 봅아라 # 즉 col의 max
apply(mat1,1,mean)
apply(mat1,2,sum) # col sum
# head(데이터) : 데이터의 앞부분을 보여준다.
head(iris)
# tail(데이터) : 데이터의 뒷부분을 보여준다.
tail(iris)
# View(데이터) : 데이터 내용을 새 윈도우를 열어서 보여준다.
View(iris) # 오름차순으로 각 COL 을 정렬시켜볼수도 있고 아주 다양하다.
# dim(데이터) : 데이터의 차원
dim(iris)
# length(데이터) : 테이터의 element 갯수
length(iris)
# names(데이터) : 데이터의 구성요소 이름 (col 의 이름)
names(iris)
# summary(데이터) : 데이터의 기초 통계량을 보여준다.
summary(iris)
# class(데이터) 데이터의 속성
class(iris)
# str(데이터) : 데이터의 구성의 속성 보여준다.
str(iris) # 범주형의 경우 어떤 level 로 구성되어있고, 각 data type 이 뭔지
# attach(데이터) : 데이터를 고정해서 사용한다.
attach(iris)
Sepal.Length # 원래 iris@Sepal.Length 로 해야하지만, attcach 로 해서 바로나온다.
# detach(데이터) : 데이터 고정을 해재한다.
detach(iris)
Sepal.Length # 이렇게 실행하면 오류가 난다.
iris$Sepal.Length
# detach(데이터) : 데이터 고정을 해재한다.
detach(iris)
# Sepal.Length # 이렇게 실행하면 오류가 난다.
iris$Sepal.Length
# with(데이터) : 데이터를 활성화한다. attach 와 비슷
with(iris,max(Sepal.Length))
#------------R 의 데이터구조------------#
# scala : 구성인자가 하나인 벡터
c(1)
# vector : 구성인자가 1개 이상/ 1차원 ( 벡터중에서 구성인자가 1개면 scala)
c(1,2,3)
# vector : 구성인자가 1개 이상/ 1차원 ( 벡터중에서 구성인자가 1개면 scala)
# vector 들은 동질적이다. 즉 한 벡터의 모든 원소들은 같은 자료형을 가여야 한다.
c(1,2,3)
c(1,'tom',3)
c(1,'tom',3)
# vector : 구성인자가 1개 이상/ 1차원 ( 벡터중에서 구성인자가 1개면 scala)
# vector 들은 동질적이다. 즉 한 벡터의 모든 원소들은 같은 자료형을 가여야 한다.
c(1,2,3) #
x <- c(1,2,3)
x <- c('a','b','c')
x[1,2]
x[c(1,2)]
names(x) <- c('first','second','third')
x
str(x)
type(x)
Type(x)
x['first']
# list
# 생각보다 자주 사용되지는 않는다.
# list 자료형을 사용할경우 서로 다른 타입들의 변수를 가져다가 붙일 수 있다.
class <- list(name <- c('han','kim','hyo'),
address <- c('seoul','seoul','USA'),
age <-c(24,26,30))
class
# list
# 생각보다 자주 사용되지는 않는다.
# list 자료형을 사용할경우 서로 다른 타입들의 변수를 가져다가 붙일 수 있다.
class <- list(name = c('han','kim','hyo'),
address = c('seoul','seoul','USA'),
age = c(24,26,30))
class
class
class
class $ name
class$name
class$name
class[[name]]
class[['name']]
class$name
class[['name']]
class
class['name']
str(class['name'])
class['name']
class$name
class[['name']]
class['name']
# head(데이터) : 데이터의 앞부분을 보여준다.
head(iris)
# tail(데이터) : 데이터의 뒷부분을 보여준다.
tail(iris)
# View(데이터) : 데이터 내용을 새 윈도우를 열어서 보여준다.
View(iris) # 오름차순으로 각 COL 을 정렬시켜볼수도 있고 아주 다양하다.
# dim(데이터) : 데이터의 차원
dim(iris)
# length(데이터) : 테이터의 element 갯수
length(iris)
# names(데이터) : 데이터의 구성요소 이름 (col 의 이름)
names(iris)
# summary(데이터) : 데이터의 기초 통계량을 보여준다.
summary(iris)
# class(데이터) 데이터의 속성
class(iris)
# str(데이터) : 데이터의 내부 구조를 보여준다.
str(iris) # 범주형의 경우 어떤 level 로 구성되어있고, 각 data type 이 뭔지
# str(데이터) : 데이터의 내부 구조를 보여준다.
str(iris) # 범주형의 경우 어떤 level 로 구성되어있고, 각 data type 이 뭔지
# class(데이터) 데이터의 속성
class(iris)
# rm(x) : 사용중인 변수 x 를 지운다.
rm(x)
# head(데이터) : 데이터의 앞부분을 보여준다.
head(iris)
# tail(데이터) : 데이터의 뒷부분을 보여준다.
tail(iris)
# View(데이터) : 데이터 내용을 새 윈도우를 열어서 보여준다.
View(iris) # 오름차순으로 각 COL 을 정렬시켜볼수도 있고 아주 다양하다.
# dim(데이터) : 데이터의 차원
dim(iris)
# length(데이터) : 테이터의 element 갯수
length(iris)
# names(데이터) : 데이터의 구성요소 이름 (col 의 이름)
names(iris)
# summary(데이터) : 데이터의 기초 통계량을 보여준다.
summary(iris)
# class(데이터) 데이터의 속성
class(iris)
# str(데이터) : 데이터의 내부 구조를 보여준다.
str(iris) # 범주형의 경우 어떤 level 로 구성되어있고, 각 data type 이 뭔지
# attach(데이터) : 데이터를 고정해서 사용한다.
attach(iris)
Sepal.Length # 원래 iris@Sepal.Length 로 해야하지만, attcach 로 해서 바로나온다.
# detach(데이터) : 데이터 고정을 해재한다.
detach(iris)
# Sepal.Length # 이렇게 실행하면 오류가 난다.
iris$Sepal.Length
# with(데이터) : 데이터를 활성화한다. attach 와 비슷
with(iris,max(Sepal.Length))
#------------R 의 데이터구조------------#
# scala : 구성인자가 하나인 벡터
c(1)
# vector
# vector : 구성인자가 1개 이상/ 1차원 ( 벡터중에서 구성인자가 1개면 scala)
# vector 들은 동질적이다. 즉 한 벡터의 모든 원소들은 같은 자료형을 가여야 한다.
c(1,2,3) # 이렇게 수행되면 동일한 숫자의 자료형을 가지게 된다.
c(1,'tom',3) # 이렇게 수행되면 string(문자) 의 동일한 자료형을 가지게 된다.
x <- c('a','b','c')
x[c(1,2)] # 인덱스를 통해 하위 벡터 반환 가능
names(x) <- c('first','second','third') # 이와 같이 벡터에 이름을 부여할 수 있다.
x['first'] # 그에 따라 이름을 가진 vector 가 만들어진다.
x
# list
# 생각보다 자주 사용되지는 않는다.
# list 자료형을 사용할경우 서로 다른 타입들의 변수를 가져다가 붙일 수 있다.
class <- list(name = c('han','kim','hyo'),
address = c('seoul','seoul','USA'),
age = c(24,26,30))
class # 위와 같이 class 라는 list 안에 vector 들을 넣을 수 있다.
class['name']
class(class['name'])
class['name']
# list
# 생각보다 자주 사용되지는 않는다.
# list 자료형을 사용할경우 서로 다른 타입들의 변수를 가져다가 붙일 수 있다.
school <- list(name = c('han','kim','hyo'),
address = c('seoul','seoul','USA'),
age = c(24,26,30))
school # 위와 같이 class 라는 list 안에 vector 들을 넣을 수 있다.
school['name']
school$name
school[['name']]
school['name']
school$name
school[['name']]
class(school['name'])
class(school$name)
school$name
class(c(1,2,3))
class(c(1,2,3))
# class(데이터) 데이터의 속성
class(iris)
class(c(1,2,3))
class(c(1,2,'a'))
class(school['name'])
school # 위와 같이 class 라는 list 안에 vector 들을 넣을 수 있다.
school$name # schoole 에서 name vector 추출
school[['name']]
class(c(1,2,3))
school[1]
school[2]
# list
# 생각보다 자주 사용되지는 않는다.
# list 자료형을 사용할경우 서로 다른 타입들의 변수를 가져다가 붙일 수 있다.
# 그리고 서로 다른 길이, 서로 다른 차원으로 구성될 수 있다.
school <- list(name = c('han','kim','hyo'),
address = c('seoul','USA'),
age = c(24))
school # 위와 같이 class 라는 list 안에 vector 들을 넣을 수 있다.
school$name # schoole 에서 name vector 추출
school[['name']]  # name vector 추출
class(school['name']) # school 에서의 name 'list' 를 추출 (리스트에서 name 이라는 서브리스트 추출 )
# list 를 입력할때에는 위 처럼 = 를 사용해야 한다.
school # 위와 같이 class 라는 list 안에 vector 들을 넣을 수 있다.
school$name # schoole 에서 name vector 추출
# list 를 입력할때에는 위 처럼 = 를 사용해야 한다.
school # 위와 같이 class 라는 list 안에 또 다른 list 형성 가능.
school[[3]]
#[] 로 접근하는 list 추출
scholl['name']
#[] 로 접근하는 list 추출
school['name']
school[1]
#[] 로 접근하는 'list' 추출
school['name']
school[1]
class(school['name']) # school 에서의 name 'list' 를 추출 (리스트에서 name 이라는 서브리스트 추출 )
#[[]] 와 [] 의 차이
class(school[1]) # school 에서의 name 'list' 를 추출 (리스트에서 name 이라는 서브리스트 추출 )
#[[]] 와 [] 의 차이
class(school[1])
class(school[[1]])
class(school[[1]]) #
school[[1]]
class(school[[1]]) # list 에서 1번째 저장된 값
school
#[[]] 와 [] 의 차이
class(school[1]) # sublist 추출
class(school[[1]]) # list 에서 1번째 저장된 값
class(school[[1]]) # list 에서 1번째의 구성성분들 추출출
#[[]] 와 [] 의 차이
class(school[1]) # sublist 추출
class(school[[1]]) # list 에서 1번째의 구성성분들 추출출
# array(배열) : 동일한 유형의 데이터가 2차원 이상으로 구성
array(1:24,c(2,3,4)) # 2*3*4 array
# array(배열) : 동일한 유형의 데이터가 2차원 이상으로 구성
array1 = array(1:24,c(2,3,4)) # 2*3*4 array
array1
array1[1]
array1[1,1]
array1[1,1,1]
array1[2]
array1[5]
array1[1,1,2]
array1[1,2,3]
# Matrix(행렬) : 동일한 유형의 2차원 데이터
matrix(1:12,nrow=3)
# nrow : row 의 수
# ncol : col 의 수
# dimnames : 행과 열에 이름을 부여
matrix(1:12,nrow=3,dimnames = list(c('a','b','c'),c('1','2','3','4','5'))
# nrow : row 의 수
# ncol : col 의 수
# dimnames : 행과 열에 이름을 부여
matrix(1:12,nrow=3,dimnames = list(c('a','b','c'),c('1','2','3','4','5'))
# nrow : row 의 수
# ncol : col 의 수
# dimnames : 행과 열에 이름을 부여
matrix(1:12,nrow=3,dimnames = list(c('a','b','c'),c('1','2','3','4','5')))
# nrow : row 의 수
# ncol : col 의 수
# dimnames : 행과 열에 이름을 부여
matrix(1:12,nrow=3,dimnames = list(c('a','b','c'),c('1','2','3','4','5')))
# nrow : row 의 수
# ncol : col 의 수
# dimnames : 행과 열에 이름을 부여
matrix(1:12,nrow=3,dimnames = list(c('a','b','c'),c('1','2','3','4')))
# byrow : 가로로 먼저 채워지게 한다. default 는 세로(col)
matrix(1:15)
# byrow : 가로로 먼저 채워지게 한다. default 는 세로(col)
matrix(1:12,nrow=3)
matrix(1:12,nrow=3,byrow=TRUE)
mat <- matrix(1:12,nrow=3)
mat[2]
mat
mat[4]
mat[6]
mat <- matrix(1:12,nrow=3,byrow = TRUE)
mat[6]
mat
mat[6]
mat <- matrix(1:12,nrow=3,byrow = TRUE) ; mat
mat <- matrix(1:12,nrow=3,
byrow = TRUE,
dimnames = list(c('a','b','c'),c('1','2','3','4'))) ; mat
mat[6] # 그냥 6번째로 index 를 주게되면 col 부터 세게 되므로 10을 추출
mat[1,2]
mat[2,3]
mat['a','2']
mat[2:4]
mat[2:4,1]
mat[1:3,1]
mat[c(1,3),c(2,4)]
mat['a',c(1,3)]
mat[c('a'),c(1,3)] # 이름과 같이 추출 가능
mat[c(1),c(1,3)] # 이름과 같이 추출 가능
mat[c(1,2),c(1,3)] # 이름과 같이 추출 가능
mat[c(1,2),1] # 이름과 같이 추출 가능
mat[c(1,2),'1'] # 이름과 같이 추출 가능
mat['a',3] # 이름과 같이 추출 가능
mat['a',c(3,1)] # 이름과 같이 추출 가능
mat['a','2'] # 이름으로도 추출 가능
mat[1:3,1] # 범위를 추출 가능
mat[c(1,3),c(2,4)] # vector 를 이용해 추출 가능
mat[1:3,1] # 범위를 추출 가능
mat[c(1,3),c(2,4)] # vector 를 이용해 추출 가능
mat['a',c(3,1)] # 이름과 같이 추출 가능
# factor
# factor(요인) : 범주형(명목/순서)의 데이터구조
# 요인이 가질 수 있는값들을 수준(level) 이라고 한다.
# 펙터는 레벨을 알파벳 순으로 정렬한다.
# 그 다음 알파벳 순의 레벨의 정수 인덱스로 벡터 내용을 다시 만든다.
# 펙터의 실제 내용은 레벨의 정수 인덱스이고, 각 정수를 레벨명으로 해독 가능한 범례가 있다고 생각하면 쉽다.
data = c('c','a','b')
example = factor(data)
as.numeric(example) # 이를 보면 3,1,2 로 되어있음을 볼 수 있다.
as.numeric(example) # 이를 보면 3,1,2 로 되어있음을 볼 수 있다.
# dataframe(데이터프레임) : 데이터 유형에 상관없는 2차원데이터
data.frame('X1'=c('a','b'),'X2'=c(1,2))
# dataframe(데이터프레임) : 데이터 유형에 상관없는 2차원데이터
name <- c('john','kim','marry')
age <- c(45,44,22)
child <- c(T,T,F)
df <- data.frame(name,age,child)
df <- data.frame(name,age,child) ; df
df
df[[1]]
df[1
df[1]
df[[1]]
str(df)
#-------------데이터 구조 함수----------#
#--왜 해야하나요?--#
library(MASS)
str(Cars93) # 데이터의 속성을 잘 확인하여야,
# factor(데이터) : 데이터를 factor 로 변환해준다.
x <- c('A','B','C')
factor_x <- factor(x)
str(factor_x) # level이 생긴 factor 형태가 된 것을 볼 수 있다.
# as.numeric(데이터) : 데이터를 숫자로 변환한다.
x <- c('4','5','10')
str(x) # chr 의 데이터 tpye
numeric_x <- as.numeric(x)
str(numeric_x) # chr -> num 으로 데이터 type 이 바뀐것을 볼 수 있다.
#rbind / cbind
array1 <- c(1,2,3)
array2 <- c(4,5,6)
array3 <- c(7,8,9)
rbind(array1,array2,array3) # row 기준으로 구성
cbind(array1,array2,array3) # col 기준으로 구성
#1dim vector 데이터로 매트릭스스 구성하기
x = c(1:9)
mat1<-matrix(x,nrow=3) # 그냥 matrix 로 하게되면 col 기준으로 채워진다.
mat1
mat2<-matrix(x,nrow=3,byrow=TRUE) # byrow=TRUE 로 하게되면 row 으로 채운다.
mat2
#col 이름 바꾸기
colnames(mat1) <- c('A','B','C')
mat1
#row 이름 바꾸기기
rownames(mat1) <- c('가','나','다')
mat1
#col 이름 바꾸기
class(mat1)
#col 이름 바꾸기
colnames(mat1) <- c('A','B','C')
mat1
#row 이름 바꾸기
rownames(mat1) <- c('가','나','다')
mat1
dim(mat)
mat
dim(mat1)
################ 현재 위치를, 기본 directory 로 지정
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
################ 현재 위치를, 기본 directory 로 지정
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
read.table('./dataset_1.txt')
# 현재 위치를, 기본 directory 로 지정
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = ' ')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = '')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = '')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = 'd')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = '.')
# txt 파일 불러오기
read.table('./dataset_1.txt',
header = T,
sep=',',
na.strings = '')
# txt 파일 불러오기[read.table]
txt= read.table('./dataset_1.txt',
header = T,
sep=',', #데이터 구분자
na.strings = '') # 결측값 표시
TRUE + TRUE
?write.table
write.table(txt,
'./example.txt',
row.names = FALSE,# 행 번호가 생략된다.
quote = FALSE, # 변수, 행 이름에 '' 생략
append = TRUE, # TRUE 면 나중에 추가로 동일한 파일 이름으로 WRITE TABLE 함수로 실행될 때
# 파일에 덮어쓰지 않고 이어붙이기를 해 준다.
na = 'NA' # 곁측값의 표기
)
