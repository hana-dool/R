82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
attach(data)
X.matrix <-  cbind(1,data[,1:2])
y.matrix <-  data[,2]
b <- solve(t(X.matrix)%*%X.matrix)%*%t(X.matrix)%*%y.matrix
X.matrix <-  matrix(cbind(1,data[,1:2]))
y.matrix <-  data[,2]
b <- solve(t(X.matrix)%*%X.matrix)%*%t(X.matrix)%*%y.matrix
b
y.matrix <-  matrix(data[,2])
b <- solve(t(X.matrix)%*%X.matrix)%*%t(X.matrix)%*%y.matrix
t(X.matrix)
X.matrix <-  matrix(cbind(1,data[,1:2]))
X.matrix
#데이터 형성하기
data=data.frame(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
attach(data)
#######################
# Q1: Estimate b
#######################
data[,1:2]
#######################
# Q1: Estimate b
#######################
data
#데이터 형성하기
data=data.frame(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
data
#데이터 형성하기
data=matrix(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
attach(data)
data = data.frame(data)
attach(data)
#######################
# Q1: Estimate b
#######################
data
#######################
# Q1: Estimate b
#######################
X.matrix <-  matrix(cbind(1,data[,1:2]))
y.matrix <-  matrix(data[,2])
b <- solve(t(X.matrix)%*%X.matrix)%*%t(X.matrix)%*%y.matrix
#######################
# Q1: Estimate b
#######################
data
X.matrix
X.matrix <-  cbind(1,data[,1:2])
X<-  cbind(1,data[,1:2])
X
Y <-  matrix(data[,2])
Y
solve(t(X)%*%X)%*%t(X)%*%Y
X
Y
solve(t(X)%*%X)
t(X)
t(X)%*%X
X
t(X)
rm(list=ls())
### Set working directory for the training data
getwd() # default directory
setwd("C:/Users/Han/Desktop/Statistics/R/R tools/R dataset") # 새로운 directory 지정하기.
### Read the input file
mydata=read.csv('stock.csv',sep=",",header=TRUE)
attach(mydata) #attach 를 붙이면 mydata 가 계속 붙어있게 인식한다.
head(mydata)  # 몇개의 열만 살펴보기
head(mydata)
model <- lm(Stock ~ Interest + Unemployment + as.factor(Year) )
#as.factor 은 dummy variable 이다. year 은 2017, 2016 값이다(categorical) if as.factor 를 쓰면 두개의 level 을 가진 값으로 나오게 된다.(값을 가진 숫자가 아닌)
#즉 범주형 자료를 처리한것.
#model <- lm(Stock ~ Interest + Unemployment + as.factor(Month) )
#이경우는 month 범주를 처리한것.
as.factor(Year)
#2개의 level ->
as.factor(Month)
summary(model)
### list objects
ls(model)
#ls라는 모델에서 제공하는것들의 list.
?lm
#lm 이라는 함수를 더 알고싶을때
yhat <- model$fitted.values
#자료의 1~24개의 데이터와 회귀식을 이용해 predict 한 value 값이다.
yhat
res <- model$residuals
res
### calculations by hand
X <-  cbind(1,Interest,Unemployment, c(rep(1,12),rep(0,12)))
# 마지막은 dummy variable 2017=1 , 2016=0 으로 dummy variable 화 시킴
# 1은 intercept(절편)part
y <-  Stock
dim(X)
type(X)
str(X)
calss(X)
calss(X)
clss(X)
class(X)
class(y)
X
#데이터 형성하기
data=matrix(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
X<-  cbind(1,data[,1:2])
Y <-  matrix(data[,2])
solve(t(X)%*%X)%*%t(X)%*%Y
lm(Y ~ X1 + X2,data=data)
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
data = data.frame(data)
lm(Y ~ X1 + X2,data = data)
reg <- lm(Y ~ X1 + X2,data = data)
summary(reg)
X <-cbind(1,data[,1:2])
Y <-matrix(data[,2])
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
#데이터 형성하기
data=matrix(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
X <-cbind(1,data[,1:2])
Y <-matrix(data[,2])
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
X <-cbind(1,data[,1:2])
Y <-matrix(data[,3])
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
#데이터 형성하기
data=data.frame(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
attach(data)
X <-cbind(1,X1,X2)
Y <-matrix(data[,3])
b <-solve(t(X)%*%X)%*%t(X)%*%Y
Y
X <-cbind(1,X1,X2)
Y
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
Y <- Y
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
#데이터 형성하기
data=data.frame(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
colnames(data) = c('X1','X2','Y')
attach(data)
X <-cbind(1,X1,X2)
X
X2
X1
data$X1
data$X2
data
#데이터 형성하기
data=matrix(c(68.5,  16.7,  174.4,
45.2,  16.8,  164.4,
91.3,  18.2,  244.2,
47.8,  16.3,  154.6,
46.9,  17.3,  181.6,
66.1,  18.2,  207.5,
49.5,  15.9,  152.8,
52.0,  17.2,  163.2,
48.9,  16.6,  145.4,
38.4,  16.0,  137.2,
87.9,  18.3,  241.9,
72.8,  17.1,  191.1,
88.4,  17.4,  232.0,
42.9,  15.8,  145.3,
52.5,  17.8,  161.1,
85.7,  18.4,  209.7,
41.3,  16.5,  146.4,
51.7,  16.3,  144.0,
89.6,  18.1,  232.6,
82.7,  19.1,  224.1,
52.3,  16.0,  166.5),byrow = TRUE, ncol=3)
data = data.frame(data)
data
colnames(data) = c('X1','X2','Y')
attach(data)
X <-cbind(1,dataX1,X2)
X <-cbind(1,X1,X2)
Y <- Y
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
b <-solve(t(X)%*%X)%*%t(X)%*%Y
X
Y
#######################
# Q1: Estimate b
#######################
data
#######################
# Q1: Estimate b
#######################
data$Y
Y <- data$Y
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
#######################
# Q1: Estimate b
#######################
X <-cbind(1,X1,X2)
Y <- data$Y
b <-solve(t(X)%*%X)%*%t(X)%*%Y
b
reg <- lm(Y ~ X1 + X2,data = data)
summary(reg)
reg$coefficients
cbinds(b,reg$coefficients)
cbind(b,reg$coefficients)
cbind(b,reg$coefficients,col=c('1','2'))
cbind(b,reg$coefficients)
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('intercept','b1','b2'),c('matrix','lm'))
Q1result
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('intercept','b1','b2'),c('matrix','lm'))
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('intercept','b1','b2'),c('matrix','lm')))
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('intercept','b1','b2'),c('matrix','lm')))
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c(,'b1','b2'),c('matrix','lm')))
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('b1','b2'),c('matrix','lm')))
Q1result <- matrix(cbind(b,reg$coefficients),dimnames = list(c('2','b1','b2'),c('matrix','lm')))
dim(Q1result)
Q1result <- matrix(cbind(b,reg$coefficients),
dimnames = list(c('2','b1','b2'),c('matrix','lm')))
Q1result <- matrix(cbind(b,reg$coefficients),
)
dim(Q1result)
(Q1result)
b,reg$coefficients)
reg$coefficients
cbind(b,reg$coefficients)
dim(cbind(b,reg$coefficients))
class(cbind(b,reg$coefficients))
rownames(Q1) = c('intercept','b1','b2')
colnames(Q1) = c('matrix','lm')
Q1<-cbind(b,reg$coefficients)
rownames(Q1) = c('intercept','b1','b2')
colnames(Q1) = c('matrix','lm')
Q1
cat("The mean of the data is", Q1, "\n")
Q1
#linear regression 의 결과이다.
reg$coefficients
cat("The variance is", reg$coefficients, "\n")
cat("The variance is", reg$coefficients, "\n")
cat("The variance is", b, "\n")
cat("lm 으로 추정한 b", reg$coefficients, "\n")
cat("matrix 로 계산한 b", b, "\n")
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
b
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
X%*%b
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
X%*%b = y.hat
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
y.hat <- X%*%b
(y - y.hat)^2
(y - y.hat
y - y.hat
y - y.hat
y
Y
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
Y.hat <- X%*%b
Y - Y.hat
(Y - Y.hat)^2
sum(Y - Y.hat)^2
sse <- sum((Y - Y.hat)^2)
mse <- sse/length(Y)
mse <- sse/(length(Y)-2)
sig.hat <- sqrt(mse)
sig.hat
#######################
# Q2: Predict mean response
#######################
#sig.hat 은 mse 를 사용한다. 즉 mse 를 먼저 구하자.
H <- X%*%solve(t(X)%*%X)%*%t(X)
H
dim(H)
I <- diag(21)
SSE <- t(Y)%*%(I-H)%*%Y
SSE
SSE/(length(Y)-2)
MSE <- SSE/(length(Y)-2)
sigma.hat <- sqrt(MSE)
sigma.hat <- sqrt(MSE)
sig^2.hat <- sqrt(MSE)
sigma.squre.hat <- MSE
X_h <- matrix(1,65.4,17.6)
#sigma2.hat 구하기
H <- X%*%solve(t(X)%*%X)%*%t(X)
I <- diag(21)
SSE <- t(Y)%*%(I-H)%*%Y
#sigma^2.hat 구하기
H <- X%*%solve(t(X)%*%X)%*%t(X)
I <- diag(21)
SSE <- t(Y)%*%(I-H)%*%Y
MSE <- SSE/(length(Y)-2)
sigma2.hat <- MSE
#x_h 구하기
X_h <- matrix(1,65.4,17.6)
#s2.y_h.hat 구하기
s2.y_h.hat <- sigma2.hat %*% t(x_h)%*%solve(t(X)%*%X)%*%X_h
#x_h 구하기
X_h <- matrix(1,65.4,17.6)
#s2.y_h.hat 구하기
s2.y_h.hat <- sigma2.hat %*% t(x_h)%*%solve(t(X)%*%X)%*%X_h
#s2.y_h.hat 구하기
s2.y_h.hat <- sigma2.hat %*% t(X_h)%*%solve(t(X)%*%X)%*%X_h
#x_h 구하기
X_h <- matrix(1,65.4,17.6)
X_H
X_h
#x_h 구하기
X_h <- matrix(c(1,65.4,17.6))
X_h
#s2.y_h.hat 구하기
s2.y_h.hat <- sigma2.hat %*% t(X_h)%*%solve(t(X)%*%X)%*%X_h
s2.y_h.hat
#Y_h.hat 구하기
Y_h.hat <- t(x_h)%*%b
#Y_h.hat 구하기
Y_h.hat <- t(X_h)%*%b
#s2.y_h.hat 구하기
s2.y_h.hat <- sigma2.hat %*% t(X_h)%*%solve(t(X)%*%X)%*%X_h
#100(1-0.95)% CI for E[Y_h]
qt(p=0.95, df=(length(Y)-2), lower.tail = TRUE)
#100(1-0.95)% CI for E[Y_h]
qt(p=0.95, df=(length(Y)-2), lower.tail = FALSE)
#100(1-0.95)% CI for E[Y_h]
qt(p=0.95, df=(length(Y)-2), lower.tail = TRUE)
#t(0.95,n-p) 구하기
t_<-qt(p=0.95, df=(length(Y)-2), lower.tail = TRUE)
#t(0.95,n-p) 구하기
t_q<-qt(p=0.95, df=(length(Y)-2), lower.tail = TRUE)
#100(1-0.95)% CI for E[Y_h]
Y_h.hat + t_q*s2.y_h.hat
Y_h.hat - t_q*s2.y_h.hat
#100(1-0.95)% CI for E[Y_h]
as.numeric(Y_h.hat + t_q*s2.y_h.hat)
as.numeric(Y_h.hat - t_q*s2.y_h.hat)
#Y_h.hat 구하기
Y_h.hat <- t(X_h)%*%b
#100(1-0.95)% CI for E[Y_h]
as.numeric(Y_h.hat + t_q*s2.y_h.hat),as.numeric(Y_h.hat - t_q*s2.y_h.hat)
as.numeric(Y_h.hat - t_q*s2.y_h.hat)
#100(1-0.95)% CI for E[Y_h]
as.numeric(Y_h.hat + t_q*s2.y_h.hat)
as.numeric(Y_h.hat - t_q*s2.y_h.hat)
